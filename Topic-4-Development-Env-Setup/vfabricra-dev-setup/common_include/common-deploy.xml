<?xml version="1.0" ?>
<project name="common-deploy" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant" 
	xmlns:common="uri://vmware.com/common_include/common-macros"
	>
	<!-- Copyright (c) 2013 VMware, Inc. All rights reserved. -->
	<import file="${ant.file.common-deploy}/../common-include.xml" />
	<import file="${ant.file.common-deploy}/../check-arch.xml" />
	<property file="${basedir}/build.properties" />
	<target name="init" depends="architecture-props">
		<echo>*** --> Managing component '${component}' </echo>
		<mkdir dir="${install.dir}" />
		<mkdir dir="${temp.dir}" />
		<property environment="env" />
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<property name="dir.separator" value="\" />
			</then>
			<elseif>
				<equals arg1="${os-family}" arg2="unix" />
				<then>
					<property name="dir.separator" value="/" />
				</then>
			</elseif>
		</if>
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<macrodef name="cmd-exec">
					<attribute name="dir" />
					<attribute name="executable" />	
					<attribute name="failonerror" />						
					<element name="args"/>
					<element name="envs" />
					<sequential>
						<echo>Exec'ing - @{executable} </echo>
						<pathconvert targetos="windows" property="windows-executable" >
							<path location="@{executable}" />
						</pathconvert>
						<exec failonerror="@{failonerror}" dir="@{dir}" executable="cmd">
							<arg value="/c" />
							<arg line="${windows-executable}"/>
							<args />
							<envs />
						</exec>
						<var name="windows-executable" unset="true" />
					</sequential>
				</macrodef>
				<macrodef name="gradle-exec">
					<attribute name="failonerror" />
					<attribute name="dir" />
					<element name="args"/>
					<sequential>
						<echo>Running '${installed.git-clone.path}/gradlew' with GRADLE_OPTS='${gradle.opts} ${gradle.proxy.settings}'</echo>
						<install-exec failonerror="@{failonerror}" dir="@{dir}" executable="cmd">
							<arg value="/c" />
							<arg value="@{dir}/gradlew.bat"/>
							<args />
							<env key="GRADLE_OPTS" value="${gradle.opts} ${gradle.proxy.settings}" />
						</install-exec>
					</sequential>
				</macrodef>
			</then>
			<elseif>
				<equals arg1="${os-family}" arg2="unix" />
				<then>
					<macrodef name="cmd-exec">
						<attribute name="dir" />
						<attribute name="executable" />
						<element name="args" />
						<sequential>
							<install-exec failonerror="false" executable="@{executable}" dir="@{dir}" >
								<args />
							</install-exec>
						</sequential>
					</macrodef>
					<macrodef name="gradle-exec">
						<attribute name="failonerror" />
						<attribute name="dir" />
						<element name="args" />
						<sequential>
							<echo>Running '${installed.git-clone.path}/gradlew' with GRADLE_OPTS='${gradle.opts} ${gradle.opts} ${gradle.proxy.settings}'</echo>
							<install-exec failonerror="@{failonerror}" executable="@{dir}/gradlew" 
								dir="@{dir}" >
								<args />
								<env key="GRADLE_OPTS" value="${gradle.opts} ${gradle.proxy.settings}" />
							</install-exec>
						</sequential>
					</macrodef>
				</then>
			</elseif>
			<else>
				<fail>The installation does not support ${os-family}.</fail>
			</else>
		</if>
		<!-- Preset definitions for execution within the install directory -->
		<if>
			<equals arg1="${os-family}" arg2="windows" />
			<then>
				<presetdef name="install-exec">
					<exec failonerror="true">
						<env key="Path" value="${env.Path}${path.separator}${install.dir}${dir.separator}bin"/>
						<env key="LD_LIBRARY_CONFIG" value="${install.dir}${dir.separator}lib"/>
						<env key="DISPLAY" value=":${X.display.number}" />
					</exec>
				</presetdef>
			</then>
			<else>
				<presetdef name="install-exec">
					<exec failonerror="true">
						<env key="PATH" value="${env.PATH}${path.separator}${install.dir}${dir.separator}bin"/>
						<env key="LD_LIBRARY_CONFIG" value="${install.dir}${dir.separator}lib"/>
						<env key="DISPLAY" value=":${X.display.number}" />
					</exec>
				</presetdef>			
			</else>
		</if>
	</target>
		
	<target name="init-props" depends="init">
		<common:load-installed component-name="${component}" installed-property="is.${component}.installed" />
		<!-- Loads all existing *.installed properties files in all component/install/ directories-->
		<for param="file">
			<path>
				<fileset dir="${base.deploy.root}" includes="*/install/*.installed">
					<depth max="2" />
				</fileset>
			</path>
			<sequential>
				<property file="@{file}" />
			</sequential>
		</for>
	</target>
	
	<target name="deploy" depends="init-props" unless="is.${component}.installed">
	</target>
	
	<target name="configure" depends="init-props">
		<common:check-installed />
	</target>

	<target name="start" depends="init-props">
		<common:check-installed />
	</target>

	<target name="stop" depends="init-props">
	</target>

	<target name="all" depends="deploy,configure,start">
	</target>
	
	<target name="restart" depends="stop,start" />
	
	<target name="clean"  >		
		<delete dir="${temp.dir}" />
		<delete dir="${install.dir}" />
	</target>
	
	<target name="clean-processes" depends="init-props" />
	
	<target name="clean-temp" > 	
		<delete dir="${temp.dir}" />
	</target>
	
	<target name="reinstall" depends="clean,deploy,configure">
	</target>
	
	<macrodef name="findProps">
		<attribute name="family" />
		<attribute name="a" />
		<attribute name="regex" />
		<sequential>
			<property file="${basedir}/fetch.properties" />
			<propertyselector property="propertyList"
				delimiter=","
				match="@{regex}"
				select="\1"
				casesensitive="false"/>
		</sequential>
	</macrodef>
	<target name="fetch-deps" depends="init">
		<if>
			<isset property="isOSX" />
			<then>
				<var name="os-family" value="osx" />
			</then>
		</if>
		<findProps family="${os-family}" a="${arch}" regex="repository\.([^\.]*)\.${os-family}\.${arch}\.archive"/>
		<for list="${propertyList}" param="sequence">
			<sequential>
				<var name="artifactLocation" unset="true" />
				<propertycopy name="artifactLocation" from="repository.@{sequence}.${os-family}.${arch}.archive" />
				<propertyregex property="file.name" 
				               input="${artifactLocation}"
				               regexp="(.*)\/(.*)$" 
				               select="\2" />
				<if>
					<isset property="artifactLocation" />
					<then>	
						<echo>Considering fetching '${artifactLocation}'</echo>
						<if>
							<not>
								<available file="${vfra.repo}/${file.name}" />
							</not>
							<then>
								<echo>Fetching '${artifactLocation}' ... </echo>
								<get src="${artifactLocation}" dest="${vfra.repo}" />
							</then>
							<else>
								<echo>Repo contains ${file.name} - skipping.</echo>
							</else>
						</if>
						<var name="file.name" unset="true" />
					</then>
					<else>
						<echo>No fetch.properties / repository.* set - skipping fetch phase.</echo>
					</else>
				</if>
			</sequential>
		</for>
	</target>
</project>
